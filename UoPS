;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; University of the People Simulator (for Atari 2600)
;; by Daniel Manoiu
;; January, 2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    processor 6502

    include "vcs.h"
    include "macro.h"
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Declare variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    seg.u Variables
    org $80

P0X byte ; defines P0 X position
P0Y byte ; defines P0 Y position
P1X byte ; defines P1 X position
P1Y byte ; defines P1 Y position
B1X byte ; defines ball (UoP logo) X position
B1Y byte ; defines ball (UoP logo) Y position

Score byte; 2-digit score, stored as a BCD
Timer byte; 2-digit timer value
OnesDigitOffset word  ; lookuptable for the score 1's digit
TensDigitOffset word  ; lookuptable for the score 10's digit
Temp byte ; variable to temporary store 

P0SpritePtr word ; pointer to P0 Sprite lookup table
P0ColPtr  word ; pointer to P0 color lookup table
P0DeadPtr word ;
P0DeadColPtr word ;

EnmSpritePtr word   ; pointer to enemy object sprite
EnmColPtr word   ; pointer to enemy object color

PwrSpritePtr word   ; pointer to collectable power up sprite
PwrColPtr word   ; pointer to collectable power up color

P0AnimOffset byte ; spite frame offset for animation
P0FrameCounter byte; counter for frame animation
P1FrameCounter byte; same

Random byte       ; RNG variable
ScoreSprite byte  ; store the sprite cit pattern for score
TimerSprite byte  ; same
CantMove byte     ; bool for movement 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
P0_HEIGHT = 10    ; 10 rows in the lookup table
ENM_HEIGHT = 9
DIGITS_HEIGHT = 5; digit height (number of rows)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start ROM code segment at $F000 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    seg Code
    org $F000           ; defines the origin of the ROM at $F000

Reset:
    CLEAN_START         ; Macro to safely clear the memory and TIA


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Initialize variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     

    lda #10
    sta P0Y ;set Y pos t0 180 

    lda #10
    sta P0X ; set X pos to 50
    
    lda #83 
    sta P1Y
    
    lda #54 
    sta P1X
    
    lda #%11010100
    sta Random
    
    lda #0
    sta CantMove
    
   lda #0
   sta Score
   sta Timer
   
   lda #0
   sta P0FrameCounter
   
   lda #0
   sta P1FrameCounter
    
    
    

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Initialize pointers to the correct lookup tables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    lda #<P0Sprite1 
    sta P0SpritePtr ; lo byte pointer for P0 Sprite
    lda #>P0Sprite1
    sta P0SpritePtr+1 ; hi byte ptr for P0 Sprite
    
    lda #<P0Color1 
    sta P0ColPtr ; lo byte pointer for P0 Sprite
    lda #>P0Color1
    sta P0ColPtr+1 ; hi byte ptr for P0 Sprite
    
    lda #<EnemySprite1 
    sta EnmSpritePtr ; lo byte pointer for P0 Sprite
    lda #>EnemySprite1
    sta EnmSpritePtr+1 ; hi byte ptr for P0 Sprite
    
    lda #<EnemyColor 
    sta EnmColPtr ; lo byte pointer for P0 Sprite
    lda #>EnemyColor
    sta EnmColPtr+1 ; hi byte ptr for P0 Sprite
    
    lda #<P0Dead
    sta P0DeadPtr ; lo byte pointer for P0 Sprite
    lda #>P0Dead
    sta P0DeadPtr+1 ; hi byte ptr for P0 Sprite
    
    lda #<P0ColorDead
    sta P0DeadColPtr ; lo byte pointer for P0 Sprite
    lda #>P0ColorDead
    sta P0DeadColPtr+1 ; hi byte ptr for P0 Sprite
    
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setting player colors
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
    ;lda #$6F
    ;sta COLUP0
    
    ;lda #$68
    ;sta COLUP1
    

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start main display loop and frame rendering
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

StartFrame:

    lda #%00000000
    sta AUDC0
    lda #%00000000
    sta AUDF0
    lda #%00000000
    sta AUDV0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Calculations pre VBLANK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    lda P0X
    ldy #0
    jsr SetObjectXPos
    
    lda P1X
    ldy #1
    jsr SetObjectXPos
    
    jsr CalculateDigitOffset  
    
    sta WSYNC
    sta HMOVE
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Display VSYNC and VBLANK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lda #2
    sta VBLANK               ; turn on VBLANK
    sta VSYNC                ; turn on VSYNC
    REPEAT 3
        sta WSYNC            ; display 3 recommended lines of VSYNC
    REPEND
    lda #0
    sta VSYNC                ; turn off VSYNC
    
        lda P0X        ; load register A with desired X position
    and #$7F       ; AND position with $7F to fix range
    sta WSYNC      ; wait for next scanline
    sta HMCLR      ; clear old horizontal position values

    sec            ; set carry flag before subtraction
DivideLoop:
    sbc #15        ; subtract 15 from the accumulator
    bcs DivideLoop ; loop while carry flag is still set

    eor #7         ; adjust the remainder in A between -8 and 7
    asl            ; shift left by 4, as HMP0 uses only 4 bits
    asl
    asl
    asl
    sta HMP0       ; set fine position
    sta RESP0      ; reset 15-step brute position
    sta WSYNC      ; wait for next scanline
    sta HMOVE      ; apply the fine position offset
    
        
    REPEAT 35
        sta WSYNC            ; display the 37 recommended lines of VBLANK
    REPEND
    sta VBLANK               ; turn off VBLANK



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Draw the scoreboard 20 lines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lda #$05     ; background color
    sta COLUBK
    lda #0
    sta PF0
    lda #0
    sta PF1
    sta PF2
    lda #0
    sta GRP0
    sta GRP1
    lda #$1C
    sta COLUPF
    lda #%00000000
    sta CTRLPF
    
    ldx #DIGITS_HEIGHT
    
.ScoreDigitLoop
    ldy TensDigitOffset
    lda Digits,Y
    and #$F0
    sta ScoreSprite    ; save the score tens digit pattern in a variable
    
    ldy OnesDigitOffset
    lda Digits,Y
    and #$0F
    ora ScoreSprite   ;merge with the tens digit sprite
    sta ScoreSprite
    sta WSYNC
    sta PF1
    
    ldy TensDigitOffset+1
    lda  Digits,Y
    and #$F0
    sta TimerSprite
    
    ldy OnesDigitOffset+1
    lda Digits,Y
    and #$0F
    ora TimerSprite
    sta TimerSprite
    
    jsr Sleep12Cycles 
    
    sta PF1
    ldy ScoreSprite
    sta WSYNC
    
    sty PF1
    inc TensDigitOffset
    inc TensDigitOffset+1
    inc OnesDigitOffset
    inc OnesDigitOffset+1
    jsr Sleep12Cycles
    
 
    
    dex
    sta PF1
    bne .ScoreDigitLoop

    sta WSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Draw the 86 visible scanlines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GameVisibleLine:
    lda #$60         ; background color
    sta COLUBK
    
    lda #$64         ; play field color
    sta COLUPF    
    
    lda #%00000001
    sta CTRLPF       ; enables reflection
    
    
    lda #%1011000
    sta PF0
    
    lda #%00000000
    sta PF1
    
    lda #0
    sta PF2
    
    ldx #76       ; counts the remaining frames
        lda #0

    lda #1
    sta ENABL
    
.GameLineLoop:
.AreWeInsidePlayerSprite:       ; check if should render sprite player0
    txa                      ; transfer X to A
    sec                      ; make sure carry flag is set
    sbc P0Y                  ; subtract sprite Y coordinate
    cmp P0_HEIGHT            ; are we inside the sprite height bounds?
    bcc .DrawSpriteP0        ; if result < SpriteHeight, call subroutine
    lda #0                   ; else, set lookup index to 0
.DrawSpriteP0:
    clc                      ; clears carry flag before addition
    adc P0AnimOffset 
    tay                      ; load Y so we can work with pointer
    lda (P0SpritePtr),Y     ; load player bitmap slice of data
    sta WSYNC                ; wait for next scanline
    sta GRP0                 ; set graphics for player 0
    lda (P0ColPtr),Y      ; load player color from lookup table
    sta COLUP0               ; set color for player 0 slice

.AreWeInsideBomberSprite:    ; check if should render sprite player1
    txa                      ; transfer X to A
    sec                      ; make sure carry flag is set
    sbc P1Y           ; subtract sprite Y coordinate
    cmp ENM_HEIGHT        ; are we inside the sprite height bounds?
    bcc .DrawSpriteP1        ; if result < SpriteHeight, call subroutine
    lda #0                   ; else, set index to 0
.DrawSpriteP1:
    tay
    lda #%0000101
    sta NUSIZ1               ; stretch player1 sprite
    lda (EnmSpritePtr),Y  ; load player bitmap slice of data
    sta WSYNC                ; wait for next scanline
    sta GRP1                 ; set graphics for player 0
    lda (EnmColPtr),Y   ; load player color from lookup table
    sta COLUP1               ; set color for player 0 slice
     


    
    dex                      ; X--
    bne .GameLineLoop        ; repeat next main game scanline while X != 0
    
    lda #0
    sta P0AnimOffset    

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Draw the avid 20 lines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lda #$82      ; background color
    sta COLUBK
    lda #%11111111
    sta PF0
    lda #%11000000
    sta PF1
    sta PF2
    lda #0
    sta GRP0
    sta GRP1
    REPEAT 20
        sta WSYNC
    REPEND    
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; last 30 lines to Overscan complete frame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lda #2
    sta VBLANK               ; turn on VBLANK again
    REPEAT 30
        sta WSYNC            ; display 30 recommended lines of VBlank Overscan
    REPEND
    lda #0
    sta VBLANK               ; turn off VBLANK
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Joystick imput for P0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lda CantMove
    cmp #1
    bne CheckP0Up
    jmp UpdateEnemyPosition
CheckP0Up:

    
    lda #%00010000       
    bit SWCHA
    bne CheckP0Down    
    inc P0Y
    inc P0FrameCounter
    lda #%00001111
    sta AUDC0
    lda #%00001001
    sta AUDF0
    lda #%00001111
    sta AUDV0

CheckP0Down:
    lda #%00100000
    bit SWCHA
    bne CheckP0Left
    dec P0Y
    inc P0FrameCounter
    lda #%00001111
    sta AUDC0
    lda #%00001001
    sta AUDF0
    lda #%00001111
    sta AUDV0

CheckP0Left:
    lda #%01000000
    bit SWCHA
    bne CheckP0Right
    dec P0X
    inc P0FrameCounter
    lda #%00001111
    sta AUDC0
    lda #%00001001
    sta AUDF0
    lda #%00001111
    sta AUDV0

CheckP0Right:
    lda #%10000000
    bit SWCHA
    bne NoInput
    inc P0X
    inc P0FrameCounter
    lda #%00001111
    sta AUDC0
    lda #%00001001
    sta AUDF0
    lda #%00001111
    sta AUDV0  
    
NoInput:
 
 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Update Enemy Position
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


 
UpdateEnemyPosition:
    lda P1Y
    clc
    cmp #0                       ; compare Y position with 0
    bmi .ResetEnemyPosition      ; if it's negative (below screen), reset position to the top
    dec P1Y                         
    jmp EndEnemyPositionUpdate        ; else decrement and update frame
.ResetEnemyPosition    
    jsr GetRandomP1Pos
  

    inc Timer
    
    
EndEnemyPositionUpdate:



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Update University Seal Position
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


    
    
EndPositionUpdate:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Check collision
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CheckCollisionP0P1:
    lda #%10000000        ;CXPPMM bit 7 detect P0 and P1 collision
    bit CXPPMM            ; check register with above patters
    bne .CollisionP0P1    ; collision between Ps happened
    jmp CheckCollisionP0PF ; skip to next check
.CollisionP0P1 
    jsr GameOver          ; call Game Over
 
CheckCollisionP0PF:
    lda #%10000000
    bit CXP0FB
    bne .CollisionP0PF
    jmp EndCollisionCheck

.CollisionP0PF:
    jsr GameOver

EndCollisionCheck:
    sta CXCLR    ; clear all collisions


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Animation systems
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


AreWeChangingEnemy:
    inc P1FrameCounter   ; Fist we increase the frame counter
    lda P1FrameCounter    
    and #8               ;limit test to 0-7
    bne ChangeEnemySpriteBack ; 

ChangeEnemySprite:
    lda #<EnemySprite2 
    sta EnmSpritePtr ; lo byte pointer for P0 Sprite
    lda #>EnemySprite2
    sta EnmSpritePtr+1 ; hi byte ptr for P0 Sprite
    jmp AreWeChanging

ChangeEnemySpriteBack:

    lda #<EnemySprite1
    sta EnmSpritePtr ; lo byte pointer for P0 Sprite
    lda #>EnemySprite1
    sta EnmSpritePtr+1 ; hi byte ptr for P0 Sprite

AreWeChanging:
    lda P0FrameCounter    
    and #8
    bne ChangeSpriteBack

ChangeSprite:    

    lda #<P0Sprite2 
    sta P0SpritePtr ; lo byte pointer for P0 Sprite
    lda #>P0Sprite2
    sta P0SpritePtr+1 ; hi byte ptr for P0 Sprite
    jmp End

ChangeSpriteBack:

    lda #<P0Sprite1
    sta P0SpritePtr ; lo byte pointer for P0 Sprite
    lda #>P0Sprite1
    sta P0SpritePtr+1 ; hi byte ptr for P0 Sprite
    

End: 


    jmp StartFrame  
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Subroutine for X pos
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SetObjectXPos subroutine

    sta WSYNC
    sec


.Divide15Loop:
    sbc #15        ; subtract 15 from the accumulator
    bcs .Divide15Loop ; loop while carry flag is still set

    eor #7         ; adjust the remainder in A between -8 and 7
    asl            ; shift left by 4, as HMP0 uses only 4 bits
    asl
    asl
    asl
    sta HMP0,Y       ; set fine position
    sta RESP0,Y      ; reset 15-step brute position
    rts
    
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GameOver subroutine
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
GameOver subroutine
        lda P0DeadPtr
        sta P0SpritePtr
        lda P0DeadColPtr
        sta P0ColPtr
        lda #1
        sta CantMove        
        rts
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Subroutine for linear-feedback shift Register random number
;; Divide the random number by 4 to limit the size of the result
;; Ad 30 to compensate for playfield
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GetRandomP1Pos subroutine
    lda Random
    asl
    eor Random
    asl
    eor Random
    asl
    asl
    eor Random
    asl
    rol Random     ;performs bitshift operations
    
    lsr 
    lsr ; divide the value by 4 by performing two right shifts
    sta P1X
    lda #30
    adc P1X
    sta P1X
    
    lda #96
    sta P1Y
    
    rts
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Subroutine for scoreboard digits
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       
CalculateDigitOffset subroutine
    ldx #1              ;X register is the loop counter
.PrepareScoreLoop       ; this will loop twice, first X=1, then X=0

    lda Score,X         ;load A with Timer when Score=1, or with Score when X=0
    and #$0F            ; remove the tenths digit my masking 4 bits with 00001111
    sta Temp            ; save the value of the A into the temp
    asl
    asl
    adc Temp            ;multiply by 5 by shifting left twice (x4) then adding the Temp again
    sta OnesDigitOffset,X ; save A in OnesDigitOffset+1 or OnesDigitOffset+0
    
    lda Score,X  ; load A with Timer (X=1) or Score (X=0)
    and #$F0     ; remove the ones digit by masking the last 4 bits 11110000
    lsr
    lsr
    sta Temp     ; saved N/4
    lsr
    lsr          ; it is now divided by 16
    adc Temp     ; add the value saved in Temp, so now it's N/16 + N/4
    sta TensDigitOffset,X ;
    
    dex 
    bpl .PrepareScoreLoop  ;While X >= 0, loop to pass a second time 
    

    rts
    
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Subroutine for sleeping 12 cycles
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Sleep12Cycles subroutine
;jsr takes 6 cycles
;rts tales 6 cycles
    
    rts


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup Table for UI digits
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
Digits:
    .byte %01110111          ; ### ###
    .byte %01010101          ; # # # #
    .byte %01010101          ; # # # #
    .byte %01010101          ; # # # #
    .byte %01110111          ; ### ###

    .byte %00010001          ;   #   #
    .byte %00010001          ;   #   #
    .byte %00010001          ;   #   #
    .byte %00010001          ;   #   #
    .byte %00010001          ;   #   #

    .byte %01110111          ; ### ###
    .byte %00010001          ;   #   #
    .byte %01110111          ; ### ###
    .byte %01000100          ; #   #
    .byte %01110111          ; ### ###

    .byte %01110111          ; ### ###
    .byte %00010001          ;   #   #
    .byte %00110011          ;  ##  ##
    .byte %00010001          ;   #   #
    .byte %01110111          ; ### ###

    .byte %01010101          ; # # # #
    .byte %01010101          ; # # # #
    .byte %01110111          ; ### ###
    .byte %00010001          ;   #   #
    .byte %00010001          ;   #   #

    .byte %01110111          ; ### ###
    .byte %01000100          ; #   #
    .byte %01110111          ; ### ###
    .byte %00010001          ;   #   #
    .byte %01110111          ; ### ###

    .byte %01110111          ; ### ###
    .byte %01000100          ; #   #
    .byte %01110111          ; ### ###
    .byte %01010101          ; # # # #
    .byte %01110111          ; ### ###

    .byte %01110111          ; ### ###
    .byte %00010001          ;   #   #
    .byte %00010001          ;   #   #
    .byte %00010001          ;   #   #
    .byte %00010001          ;   #   #

    .byte %01110111          ; ### ###
    .byte %01010101          ; # # # #
    .byte %01110111          ; ### ###
    .byte %01010101          ; # # # #
    .byte %01110111          ; ### ###

    .byte %01110111          ; ### ###
    .byte %01010101          ; # # # #
    .byte %01110111          ; ### ###
    .byte %00010001          ;   #   #
    .byte %01110111          ; ### ###

    .byte %00100010          ;  #   #
    .byte %01010101          ; # # # #
    .byte %01110111          ; ### ###
    .byte %01010101          ; # # # #
    .byte %01010101          ; # # # #

    .byte %01110111          ; ### ###
    .byte %01010101          ; # # # #
    .byte %01100110          ; ##  ##
    .byte %01010101          ; # # # #
    .byte %01110111          ; ### ###

    .byte %01110111          ; ### ###
    .byte %01000100          ; #   #
    .byte %01000100          ; #   #
    .byte %01000100          ; #   #
    .byte %01110111          ; ### ###

    .byte %01100110          ; ##  ##
    .byte %01010101          ; # # # #
    .byte %01010101          ; # # # #
    .byte %01010101          ; # # # #
    .byte %01100110          ; ##  ##

    .byte %01110111          ; ### ###
    .byte %01000100          ; #   #
    .byte %01110111          ; ### ###
    .byte %01000100          ; #   #
    .byte %01110111          ; ### ###

    .byte %01110111          ; ### ###
    .byte %01000100          ; #   #
    .byte %01100110          ; ##  ##
    .byte %01000100          ; #   #
    .byte %01000100          ; #   #


    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup Table for player bitmap 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;---Graphics Data from PlayerPal 2600---

P0Sprite1:

        .byte #%00000000
        .byte #%00110110;$04
        .byte #%00010100;$AA
        .byte #%00011100;$A6
        .byte #%00001001;$D2
        .byte #%00111110;$D0
        .byte #%01001000;$F2
        .byte #%00001100;
        .byte #%00001000;$F2
        .byte #%00001110;$02

P0Sprite2:

        .byte #%00000000
        .byte #%00010100;$04
        .byte #%00010100;$AA
        .byte #%00001000;$A6
        .byte #%00101010;$D2        
        .byte #%00111100;$D0        
        .byte #%00001000;$F2 
        .byte #%00011000;
        .byte #%00001000;$F2               
        .byte #%000011000;$02


P0Dead
        .byte #%11100100;$40
        .byte #%01110110;$40
        .byte #%11110100;$42
        .byte #%11111000;$40
        .byte #%11001010;$02
        .byte #%01011000;$F2
        .byte #%11100100;$D2
        .byte #%00011000;$A2
;---End Graphics Data---







;---End Graphics Data---

    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup Table for player color 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    

;---Color Data from PlayerPal 2600---

P0Color1 
        .byte #%00000000
        .byte #$04;
        .byte #$AA;
        .byte #$A6;        
        .byte #$D2;
        .byte #$D0;       
        .byte #$F2;        
        .byte #$00;
        .byte #$F2;
        .byte #$16;
        
P0Color1Turn 
        .byte #%00000000
        .byte #$04;
        .byte #$AA;
        .byte #$A6;        
        .byte #$D2;
        .byte #$D0;       
        .byte #$F2;        
        .byte #$F2;       
        .byte #$1C; 


P0ColorDead
        .byte #$40;
        .byte #$40;
        .byte #$42;
        .byte #$40;
        .byte #$02;
        .byte #$F2;
        .byte #$D2;
        .byte #$A2;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup table for UoP Logo
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Player1Bitmap:

    .byte #%00000000
    .byte #%11111111;$04
    .byte #%11111111;$6E
    .byte #%11011011;$6E
    .byte #%11011011;$6E
    .byte #%11011011;$6E
    .byte #%01000010;$6E
    .byte #%00111100;$0A
    .byte #%00011000;$08    

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup tables for ENEMY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;---Graphics Data from PlayerPal 2600---

EnemySprite1
        .byte #%00000000
        .byte #%10000010;$40
        .byte #%01000100;$40
        .byte #%00111000;$40
        .byte #%01111100;$40
        .byte #%10101010;$40
        .byte #%10111010;$40
        .byte #%10010010;$0E
        .byte #%01000100;$1E
        
        
EnemySprite2
        .byte #%00000000
        .byte #%01000100;$40
        .byte #%01000100;$40
        .byte #%00111000;$40
        .byte #%11101110;$40
        .byte #%10101010;$40
        .byte #%10111010;$40
        .byte #%10101010;$0E
        .byte #%10000010;$1E
;---End Graphics Data---


;---Color Data from PlayerPal 2600---

EnemyColor
        .byte #%00000000
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$0E;
        .byte #$1E;

;---End Color Data---
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fill ROM size to exactly 4kb
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
      org $FFFC          ; Defines origin to $FFFC
     .word Reset       ; Reset vector at $FFFC
     .word Reset       ; Interrupt vector at $FFFE
