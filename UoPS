;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; University of the People Simulator (for Atari 2600)
;; by Daniel Manoiu
;; January, 2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    processor 6502

    include "vcs.h"
    include "macro.h"
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start an unititialized segment at address $80 for variable declaration 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    seg.u Variables
    org $80
P0H byte ; defines one byte for P0 Height
P1H byte ; defines one byte for P1 Height

P0X byte ; defines P0 X position
P0Y byte ; defines P0 Y position



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start ROM code segment at $F000 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    seg Code
    org $F000           ; defines the origin of the ROM at $F000

Reset:
    CLEAN_START         ; Macro to safely clear the memory and TIA

    ldx #$60            ; background color
    stx COLUBK
    
    lda #$64         ; play field color
    sta COLUPF    
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Initialize variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     

    lda #9
    sta P0H ; store 9 in P0 Height
    lda #8 
    sta P1H ; store 8 in P1 Height


    lda #100
    sta P0Y ;set Y pos t0 180 

    lda #20
    sta P0X ; set X pos to 50

    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setting player colors
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
    ;lda #$6F
    ;sta COLUP0
    
    ;lda #$68
    ;sta COLUP1
    
    ldy #%00000000; TRLPF D1 set to 1
    sty CTRLPF
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start a new frame by turning on VBLANK and VSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

StartFrame:
    lda #2
    sta VBLANK
    sta VSYNC
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Generate the three lines of VSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    REPEAT 3
        sta WSYNC    ; three scanlines Vsync
    REPEND
    lda #0
    sta VSYNC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Set Horizontal position
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    lda P0X        ; load register A with desired X position
    and #$7F       ; AND position with $7F to fix range
    sta WSYNC      ; wait for next scanline
    sta HMCLR      ; clear old horizontal position values

    sec            ; set carry flag before subtraction
DivideLoop:
    sbc #15        ; subtract 15 from the accumulator
    bcs DivideLoop ; loop while carry flag is still set

    eor #7         ; adjust the remainder in A between -8 and 7
    asl            ; shift left by 4, as HMP0 uses only 4 bits
    asl
    asl
    asl
    sta HMP0       ; set fine position
    sta RESP0      ; reset 15-step brute position
    sta WSYNC      ; wait for next scanline
    sta HMOVE      ; apply the fine position offset

    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Generate the 35 recommended scanlines of VBLANK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    REPEAT 30
        sta WSYNC
    REPEND
    lda #0
    sta VBLANK
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Draw the visible scanlines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lda #$FF       ; enable playfield
    sta PF0
    sta PF1
    sta PF2 
    
    REPEAT 20
        sta WSYNC  ; wait for 20 lines
    REPEND
    
    lda #0         ; disable playfield
    sta PF0
    sta PF1
    sta PF2
    
    ldx #152
Scanline:
    txa          ; transfer x to a
    sec          ; set the carry flag (to calculate subtractions)
    sbc P0Y      ; subtract the player Y coordinate
    cmp P0H      ; check if inside sprite height bounds
    bcc LoadBitmap ; if result < sprite height, call subroutine
    lda #0       ; else, set index to 0
    
LoadBitmap:
    tay          ; transfer A to Y
    lda P0Bitmap,Y ; load bitmap
    
    sta WSYNC    ; next scanline
    sta GRP0     ; graphics for player 0
    lda P0Col,Y  ; load player color
    sta COLUP0   ; set color
    
    dex
    bne Scanline
    
    lda #$FF       ; enable playfield
    sta PF0
    sta PF1
    sta PF2 

    REPEAT 20
        sta WSYNC  ; wait for remaining 15 empty scanlines
    REPEND

    lda #0         ; disable playfield
    sta PF0
    sta PF1
    sta PF2
    
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; last 30 lines to Overscan complete frame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lda #2
    sta VBLANK
    REPEAT 30
        sta WSYNC
    REPEND
    lda #0
    sta VBLANK
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Joystick check
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CheckP0Up:
    lda #%00010000       
    bit SWCHA
    bne CheckP0Down
    inc P0Y

CheckP0Down:
    lda #%00100000
    bit SWCHA
    bne CheckP0Left
    dec P0Y

CheckP0Left:
    lda #%01000000
    bit SWCHA
    bne CheckP0Right
    dec P0X

CheckP0Right:
    lda #%10000000
    bit SWCHA
    bne NoInput
    inc P0X
    
NoInput:

    
    jmp StartFrame
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup table for UoP Logo
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Player1Bitmap:
 
    byte #%11111111    ;  ###### 
    byte #%10000001    ; ########   
    byte #%10000001    ; #      # 
    byte #%10111101    ; # #### #
    byte #%10111101    ; # #### # 
    byte #%10111101    ; # #### # 
    byte #%11111111    ; ########     
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup Table for player bitmap 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

P0Bitmap:

    byte #%00000000    ;
    byte #%01101100    ;  ## ##   
    byte #%00101000    ;   # # 
    byte #%00111000    ;   ###  
    byte #%00010010    ;    #  # 
    byte #%01111100    ;  #####
    byte #%10010000    ; #  #  
    byte #%00010000    ;    #
    byte #%00011000    ;    ## 
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup Table for player color 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    

P0Col:
    byte #$00
    byte #$B1
    byte #$07
    byte #$06
    byte #$E4
    byte #$E3
    byte #$21
    byte #$F2 
    byte #$01
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup table for number 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

NumberBitmap:
     byte #%00011000    ;   ###  
     byte #%00001000    ;     #  
     byte #%00011000    ;   ###  
     byte #%00010000    ;   #   
     byte #%00011000    ;   ###
    


    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fill ROM size to exactly 4kb
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
    org $FFFC          ; Defines origin to $FFFC
     .word Reset       ; Reset vector at $FFFC
     .word Reset       ; Interrupt vector at $FFFE
